import numpy as np

class QLearning:
    def __init__(self, num_states, num_actions, learning_rate=0.1, discount_factor=0.9, epsilon=0.1):
        self.num_states = num_states
        self.num_actions = num_actions
        self.learning_rate = learning_rate
        self.discount_factor = discount_factor
        self.epsilon = epsilon
        self.q_table = np.zeros((num_states, num_actions))

    def choose_action(self, state):
        if np.random.rand() < self.epsilon:
            return np.random.randint(self.num_actions)
        else:
            return np.argmax(self.q_table[state])

    def update_q_table(self, state, action, reward, next_state):
        max_next_q_value = np.max(self.q_table[next_state])
        td_target = reward + self.discount_factor * max_next_q_value
        td_error = td_target - self.q_table[state, action]
        self.q_table[state, action] += self.learning_rate * td_error

# Example usage:
num_states = 6
num_actions = 2
env = QLearning(num_states, num_actions)

# Define a simple grid-world environment
# Reward structure: reaching the goal (state 5) yields a reward of 1, otherwise 0
rewards = [0, 0, 0, 0, 1, 0]

# Training loop
num_episodes = 1000
for episode in range(num_episodes):
    state = np.random.randint(num_states)  # Start from a random state
    done = False
    while not done:
        action = env.choose_action(state)
        next_state = (state + 1) % num_states  # Transition to the next state
        reward = rewards[next_state]
        env.update_q_table(state, action, reward, next_state)
        state = next_state
        if state == 5:  # Goal reached
            done = True

# After training, you can use the learned Q-table to make decisions in the environment
# For example:
state = 0
while state != 5:
    action = env.choose_action(state)
    print("State:", state, "Action:", action)
    state = (state + 1) % num_states
